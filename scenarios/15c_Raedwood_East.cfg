#textdomain wesnoth-A_New_Order
[scenario]
    name = _ "Raedwood East"
    id=15c_Raedwood_East
    map_data="{~add-ons/A_New_Order/maps/RaedwoodEast.map}"
    next_scenario=16_Choosing_the_Best
    {INTRO_AND_SCENARIO_MUSIC silence.ogg elvish-theme.ogg}
    {EXTRA_SCENARIO_MUSIC theme_of_a_new_order.ogg}
    {EXTRA_SCENARIO_MUSIC elf-land.ogg}
    {EXTRA_SCENARIO_MUSIC breaking_the_chains.ogg}
    {EXTRA_SCENARIO_MUSIC journeys_end.ogg}
    {EXTRA_SCENARIO_MUSIC traveling_minstrels.ogg}
    {EXTRA_SCENARIO_MUSIC wanderer.ogg}
#ifdef DEBUG_MODE
    turns=unlimited
#else
    {TURNS4 18 16 14 12}
#endif
    [story]
        [part]
            #po: TODO: rewrite (will need to form a smooth transition from the updated dialogue I added in S15a):
            story=_"And so Gawen and his party went to the eastern part of Raedwood."
        [/part]
    [/story]
    {DAWN}
    {MORNING}
    {AFTERNOON}
    {DUSK}
    {FIRST_WATCH}
    {SECOND_WATCH}
    victory_when_enemies_defeated=yes # TODO: might want to remove this if I can think of a more interesting objective...
    [side]
        controller=human
        id=Gawen Hagarthen
        name=_"Gawen Hagarthen"
        type=Hagarthen
        profile=portraits/gawen_was.png
        team_name=good
        canrecruit=yes
        unrenamable=yes
        side=1
        facing=se
        {GOLD4 120 110 100 90}
        {INCOME4 2 1 0 -1}
    [/side]
    [side]
        controller=ai
        # wmllint: local spellings Velkon Elch
        id=Velkon Elch
        name=_"Velkon Elch"
#ifdef NIGHTMARE
        type=Fire Dragon
#else
#ifdef HARD
        type=Drake Flameheart
#else
        type=Drake Flare
#endif
#endif
        team_name=firelovers
        canrecruit=yes
        side=2
        facing=ne
        recruit=Drake Burner,Fire Drake,Drake Clasher,Drake Fighter,Drake Glider,Dune Burner,Red Mage,Fire Ant,Fire Guardian,Jinn,Orcish Archer,Troll Shaman,Goblin Pillager
        {GOLD4 280 285 290 295}
        {INCOME4 3 5 7 9}
        [ai]
            recruitment_diversity={ON_DIFFICULTY4 6.6 5.5 4.4 3.3}
            recruitment_more="Drake Burner"
            [goal]
                [criteria] #NOTE: this is a SUF, because we're targeting a unit
                    race=wose
                [/criteria]
                value=6 # (unsure whether an increasing or decreasing pattern makes more sense...)
            [/goal]
            [goal]
                [criteria] #NOTE: this is a SUF, because we're targeting a unit
                    side=1,2
                    [filter_location]
                        terrain=*^F*
                    [/filter_location]
                [/criteria]
                value=5
            [/goal] #
            [goal]
                [criteria] #NOTE: this is a SUF, because we're targeting a unit
                    race=elf
                [/criteria]
                value=4
            [/goal]
            [goal]
                name=protect_unit
                [criteria] #NOTE: this is a SUF, because we're protecting a unit
                    side=2
                    id=Velkon Elch
                    canrecruit=yes
                [/criteria]
                protect_radius=2
                value=3
            [/goal]
            [goal]
                name=target_location
                [criteria] #NOTE: this is a SLF, because we're targeting a location
                    terrain=*^F*
                    include_borders=no
                [/criteria]
                value=2
            [/goal]
            [goal]
                name=protect_location
                [criteria] #NOTE: this is a SLF, because we're protecting a location
                    x,y=6,14
                [/criteria]
                protect_radius=2
                value=1
            [/goal]
            aggression={ON_DIFFICULTY4 0.5 0.6 0.7 0.8}
            leader_aggression="-5.5"
#ifdef EASY
            villages_per_scout=2
#else
            villages_per_scout=3
#endif
            scout_village_targeting=4.4 # (scouts go for villages more)
            village_value={ON_DIFFICULTY4 0.6 0.7 0.8 0.9} # (everyone else goes for villages less)
        [/ai]
        # An attempt to prevent the enemy leader from suiciding too early:
        [ai]
            turns=1-2
            passive_leader=yes
        [/ai] #
    [/side]
    {STARTING_VILLAGES 2 {ON_DIFFICULTY4 4 5 6 8}} # (doesn't quite fit a pattern because we need to grab certain villages)
    # Limit level 2 recruits:
    {LIMIT_CONTEMPORANEOUS_RECRUITS 2 "Fire Drake" {ON_DIFFICULTY4 1 2 3 4}}
    {LIMIT_CONTEMPORANEOUS_RECRUITS 2 "Red Mage" {ON_DIFFICULTY4 1 2 3 4}}
    {LIMIT_CONTEMPORANEOUS_RECRUITS 2 Jinn {ON_DIFFICULTY4 1 2 3 4}}
    {LIMIT_CONTEMPORANEOUS_RECRUITS 2 "Troll Shaman" {ON_DIFFICULTY4 1 2 3 4}}
    {LIMIT_CONTEMPORANEOUS_RECRUITS 2 "Goblin Pillager" {ON_DIFFICULTY4 1 2 3 4}}

    [side]
        controller=ai
        id=Quësel
        name=_"Quësel"
#ifdef EASY
        type=Elvish Avenger
#else
        type=Elvish Ranger
#endif
        team_name=good # TODO: add chances for them to turn on you (later)
        canrecruit=yes
        side=3
        facing=sw
        recruit=Elvish Archer,Elvish Fighter,Elvish Scout,Elvish Shaman,Wose Sapling
#ifdef DEBUG_MODE
        extra_recruit=Wose
#endif
        {GOLD4 190 180 170 160}
        {INCOME4 4 3 2 1}
        [ai]
#ifdef DEBUG_MODE
            # to test the wose death events better:
            recruitment_more="Wose Sapling, Wose"
#endif
            [goal]
                name=protect_location
                [criteria] #NOTE: this is a SLF, because we're protecting a location
                    terrain=*^F*
                [/criteria]
                protect_radius=1
                value=7
            [/goal]
            grouping=defensive
            [avoid]
                # everything except castle, keep, village, forest, flowers, regular hills, overgrown cobbles
                terrain=!,C*,K*,*^V*,*^F*,*^Efm,Hh,Rp
            [/avoid]
        [/ai]
    [/side]

    [event]
        name=prestart
        {IF_HAVE_UNIT_ANY (Reme Carrenemoe)}
        {RECALL (Reme Carrenemoe)}
        {END_IF_WITHOUT_ELSE}
        {RECALL (Ruvio)}
        # The elves get all the elvish villages:
        {CAPTURE_VILLAGES_OF_TYPE Gg^Ve 3 19 4 4}
    [/event]

    [event]
        name=start
        {MESSAGE (Quësel) () (_"Quësel") _"You there, you must be the emissaries from Freetown! Please help us! The drakes are trying to burn down our forest!"}
        {IF_HAVE_UNIT_ANY (Elorain)}
        {RECALL (Elorain)}
        {ELSE}
        {IF_HAVE_UNIT_ANY (Milildur)}
        {RECALL (Milildur)}
        {ELSE}
        {IF_HAVE_UNIT_ANY (Kyobaine)}
        {RECALL (Kyobaine)}
        {ELSE}
        {IF_HAVE_UNIT_ANY (Mithrandil)}
        {RECALL (Mithrandil)} # (not actually a unit that you can have on your side yet, but I may change that)
        {ELSE}
        {RECALL (Karen)}
        {RECALL (Karl Regven)}
        {MSG_Karen _"Hello there! You missed me, of course?"}
        {MSG_Regven _"Forgive me, my lord. I know how it looks, but I really was trying."}
        {MSGm_Gawen _"I was kind of expecting you."}
        {FOUR_END_IFs}
        {MSG_EMK _"Quësel! While it may be a good thing to see you again, what a shame it is that it must be under such dire circumstances! Have no fear, for we are prepared to pierce straight through these beasts' scaly hides!"}
        [objectives]
            side=1
            [objective]
                description=_"Kill Velkon Elch"
                condition=win
            [/objective]
            [objective]
                description=_"Death of Ruvio"
                condition=lose
            [/objective]
            [objective]
                description=_"Death of Gawen Hagarthen"
                condition=lose
            [/objective]
            [objective]
                description=_"Death of Karen"
                condition=lose
                [show_if]
                    [have_unit]
                        id=Karen
                    [/have_unit]
                [/show_if]
            [/objective]
            [objective]
                description=_"The forest burns down"
                condition=lose
            [/objective]
            [objective]
                description=_"The drakes kill Quësel"
                condition=lose
            [/objective]
            {OBJECTIVE_NOTES _"Woses standing on campfires will take damage every turn."}
#ifdef DEBUG_MODE
            {HAS_NO_TURN_LIMIT}
#else
            {TURNS_RUN_OUT}
#endif
        [/objectives]
        {VARIABLE ano_wose_burn_counter 0}
    [/event]

    [event]
        name=recruit
        [filter]
            side=2
            [not]
                race=drake
            [/not]
        [/filter]
        [redraw][/redraw]
        [scroll_to_unit]
            id=$unit.id
            highlight=yes
        [/scroll_to_unit]
        # If Velkon Elch is a fire dragon, it might be blocking the recruited unit,
        # so make Velkon Elch more transparent so that the recruited unit is more visible:
        [modify_unit]
            [filter]
                id=Velkon Elch
            [/filter]
            [object]
                id=temp_transparency
                duration=turn
                silent=yes
                [effect]
                    apply_to=image_mod
                    # TODO: might want to tune this better so it looks nicer:
                    replace="O(50%)"
                [/effect]
            [/object]
        [/modify_unit]
        [redraw][/redraw]
        [lock_view][/lock_view]
        [delay]
            time=456
        [/delay]
        # Need to write these message tags out in full for extra keys:
        [message]
            speaker=Gawen Hagarthen
            message=_"I thought you said that it was drakes that were attacking you?"
            image="portraits/gawen_was.png~RIGHT()"
            caption=_"Gawen"
            scroll=no
        [/message]
        [message]
            speaker=Quësel
            message=_"Well, yes, but they seem to have attracted fire-lovers of all kinds to their side..."
            image_pos=right
            scroll=no
        [/message]
        [remove_object]
            id=Velkon Elch
            object_id=temp_transparency
        [/remove_object]
        [redraw][/redraw]
        [unlock_view][/unlock_view]
    [/event]

    [event]
        name=last breath
        [filter]
            id=Quësel
        [/filter]
        [filter_second]
            side=2
        [/filter_second]
        {MESSAGE (Quësel) () (_"Quësel") _"Those blasted woodburners have overrun us! Raedwood is doomed now!"}
    [/event] #

    [event]
        name=die
        [filter]
            id=Quësel
        [/filter]
        [filter_second]
            side=2
        [/filter_second]
        [endlevel]
            result=defeat
        [/endlevel]
    [/event] #

    # WIP: forest burning code
    # (macro copied and renamed from IftU S16)
#define ANO_BURN_SOUNDS _DELAY
    [sound]
        name="torch.ogg"
    [/sound]

    [delay]
        time={_DELAY}
    [/delay]

    [sound]
        name="wose-die.ogg"
    [/sound]
#enddef

    [event]
        name=attacker hits
        first_time_only=no
        [filter]
            side=2
            [has_attack]
                type=fire
            [/has_attack]
        [/filter]
        [filter_attack]
            type=fire
        [/filter_attack]
        [filter_second]
            [filter_location]
                terrain=*^F*
            [/filter_location]
        [/filter_second]
        {ANO_BURN_SOUNDS 200}
        [terrain]
            x,y=$x2,$y2
            layer=overlay
            terrain="^Ecf"
        [/terrain]
        [fire_event]
            name=check_forests_left
        [/fire_event]
    [/event]

#define ANO_BURN_FOREST _TERR_IN _TERR_OUT
    [event]
        name=moveto
        first_time_only=no
        [filter]
            side=2
            [has_attack]
                type=fire
            [/has_attack]
            [filter_location]
                terrain={_TERR_IN}
            [/filter_location]
        [/filter]
        {ANO_BURN_SOUNDS 200}
        [terrain]
            x,y=$x1,$y1
            terrain={_TERR_OUT}
        [/terrain]
        [cancel_action][/cancel_action]
        [fire_event]
            name=check_forests_left
        [/fire_event]
    [/event]
#enddef

    # Order matters here, in order to avoid event-chaining:
    {ANO_BURN_FOREST Re^Ecf Rd^Dr}
    {ANO_BURN_FOREST Gd^Fdw Re^Ecf}
#ifdef NIGHTMARE
    # skip straight to fire:
    {ANO_BURN_FOREST Gs^Fp Gd^Ecf}
    {ANO_BURN_FOREST Re^Fdw Rd^Ecf}
#else
    # intermediate step before fire essentially gives forests an extra hitpoint:
    {ANO_BURN_FOREST Gs^Fp Gd^Fdw}
    # let fires be put out:
    {ANO_BURN_FOREST Gg^Ecf Gd^Esd}
    {ANO_BURN_FOREST Gs^Ecf Rd^Esd}
    {ANO_BURN_FOREST Gd^Ecf Rd^Edt}
    # this one just skips fire completely:
    {ANO_BURN_FOREST Re^Fdw Rd^Edb}
#endif

#undef ANO_BURN_FOREST

#define ANO_WOSE_DIE _TERR_IN _TERR_OUT
    [event]
        name=die
        first_time_only=no
        [filter]
            race=wose
            [filter_location]
                terrain={_TERR_IN}
            [/filter_location]
        [/filter]
        [filter_second]
            side=2
            [has_attack]
                type=fire
            [/has_attack]
        [/filter_second]
        [filter_second_attack]
            type=fire
        [/filter_second_attack]
        # Use this variable check to try to avoid chaining:
        [if]
            [variable]
                name=ano_wose_burn_counter
                equals=0
            [/variable]
            [then]
                {ANO_BURN_SOUNDS 200}
                [terrain]
                    x,y=$x1,$y1
                    terrain={_TERR_OUT}
                [/terrain]
                [if]
                    [have_unit]
                        x,y=$x1,$y1
                    [/have_unit]
                    [and]
                        [have_unit]
                            x,y=$x2,$y2
                        [/have_unit]
                    [/and]
                    [then]
                        [kill]
                            x,y=$x1,$y1
                            animate=yes
                            fire_event=no
                            [secondary_unit]
                                x,y=$x2,$y2
                            [/secondary_unit]
                            # secondary_unit uses primary_attack:
                            [primary_attack]
                                type=fire
                            [/primary_attack]
                        [/kill]
                    [/then]
                    [else]
                        [cancel_action][/cancel_action]
                    [/else]
                [/if]
                [fire_event]
                    name=check_forests_left
                [/fire_event]
            [/then]
            [else]
                [break][/break]
            [/else]
        [/if]
        {INCREMENT ano_wose_burn_counter}
    [/event]
#enddef

    # I'm listing more terrains here than we actually use,
    # just in case I modify the map more later:
    {ANO_WOSE_DIE Gg^Efm Gg} # remove flowers
    {ANO_WOSE_DIE Gs^Efm Gs} # likewise
    {ANO_WOSE_DIE Gd^Efm Gd} # likewise
    {ANO_WOSE_DIE Gg Gs} # green -> semi-dry
    {ANO_WOSE_DIE Gs Gd} # semi-dry -> dry
    {ANO_WOSE_DIE Gll Gd} # leafy -> dry
    {ANO_WOSE_DIE Gd Re} # dry -> regular dirt
    {ANO_WOSE_DIE Re Rd} # regular dirt -> dry dirt
    {ANO_WOSE_DIE Rb Rd} # dark dirt -> dry dirt
    {ANO_WOSE_DIE Rp Rr} # overgrown cobbles -> regular cobbles
    {ANO_WOSE_DIE Rr Qlf} # regular cobbles -> lava
    {ANO_WOSE_DIE Mm Md} # regular mountains -> dry mountains
    {ANO_WOSE_DIE Md Mv} # dry mountains -> volcano
    {ANO_WOSE_DIE Hh Hhd} # regular hills -> dry hills
    {ANO_WOSE_DIE Hhd Hd} # dry hills -> dunes
    {ANO_WOSE_DIE Ce Cer} # encampment -> ruined encampment
    {ANO_WOSE_DIE Ke Ker} # encampment keep -> ruined encampment keep
#ifdef EASY
    {ANO_WOSE_DIE Gg^Ecf Gs^Dr} # fire burns out
    {ANO_WOSE_DIE Gs^Ecf Gd^Esd} # likewise
    {ANO_WOSE_DIE Gd^Ecf Rd^Dr} # likewise
    {ANO_WOSE_DIE Re^Ecf Rd^Esd} # likewise
#endif
    {ANO_WOSE_DIE Gg^Vh Gs^Vhr} # cottage -> ruined cottage
    # I was having a chaining problem here, too, but hopefully the new events
    # I added below will help keep me from having to reorder them...

#undef ANO_WOSE_DIE

    [event]
        name=attack
        first_time_only=no
        [filter]
            race=wose
        [/filter]
        [fire_event]
            name=reset_wose_counter
        [/fire_event]
    [/event]

    [event]
        name=attack
        first_time_only=no
        [filter_second]
            race=wose
        [/filter_second]
        [fire_event]
            name=reset_wose_counter
        [/fire_event]
    [/event]

    [event]
        name=new turn,side turn
        id=turn_upkeep
        first_time_only=no
        [fire_event]
            name=reset_wose_counter
        [/fire_event]
        [fire_event]
            name=check_forests_left
        [/fire_event]
    [/event]
    [event]
        name=new turn
        id=fire_spreads
        first_time_only=no
#ifdef EASY
        [redraw][/redraw]
#else
        # WIP: code to allow the fire to spread from campfires here:
        [store_locations]
            terrain=*^F*
            [filter_adjacent_location]
                terrain=*^Ecf
            [/filter_adjacent_location]
            variable=locs_to_burn
        [/store_locations]
        [foreach]
            array=locs_to_burn
            [do]
#ifdef DEBUG_MODE
                {IF_DEBUG_MODE_IS_ACTUALLY_ON}
                {DEBUGMSG1 "iteration $i points to tile at $locs_to_burn[$i].x,$locs_to_burn[$i].y"}
                {END_IF_WITHOUT_ELSE}
#endif
                [scroll_to]
                    x,y=$locs_to_burn[$i].x,$locs_to_burn[$i].y
                [/scroll_to]
                [lock_view][/lock_view]
                {ANO_BURN_SOUNDS 200}
                [terrain]
                    x,y=$locs_to_burn[$i].x,$locs_to_burn[$i].y
                    layer=overlay
                    terrain="^Ecf"
                [/terrain]
                [redraw][/redraw]
                {DELAY 200}
                [unlock_view][/unlock_view]
            [/do]
        [/foreach]
        {CLEAR_VARIABLE locs_to_burn}
#endif
        [fire_event]
            name=check_forests_left
        [/fire_event]
    [/event]

#undef ANO_BURN_SOUNDS

    [event]
        name=reset_wose_counter
        first_time_only=no
        [if]
            [variable]
                name=ano_wose_burn_counter
                greater_than=0
            [/variable]
            [then]
#ifdef DEBUG_MODE
                {IF_DEBUG_MODE_IS_ACTUALLY_ON}
                {DEBUGMSG1 "Resetting wose burn counter from $ano_wose_burn_counter to 0..."}
                {END_IF_WITHOUT_ELSE}
#endif
                {VARIABLE ano_wose_burn_counter 0}
            [/then]
            [else]
                [break][/break]
            [/else]
        [/if]
    [/event]

    [event]
        name=side 3 turn
        first_time_only=no
        [harm_unit]
            [filter]
                race=wose
                [filter_location]
                    terrain=*^Ecf
                [/filter_location]
            [/filter]
            amount={ON_DIFFICULTY4 3 4 5 6}
            damage_type=fire
            kill=yes
            fire_event=yes
            animate="defender"
        [/harm_unit]
    [/event]

    # WIP: checks for how much forest has been burned and inflict defeat if there are none left
    [event]
        name=check_forests_left
        first_time_only=no
        # TODO: this is almost never reached; haven't figured out how to test it yet...
        [if]
            [have_location]
                terrain=*^F*
                count=0
                include_borders=no
            [/have_location]
            [then]
                {MESSAGE (Quësel) () (_"Quësel") _"Oh no! Our dear Raedwood, burned to ash! The free peoples of the forest shall no longer have a refuge from Akladian tyranny! We have failed!"}
                [endlevel]
                    result=defeat
                [/endlevel]
            [/then]
            [elseif]
                [have_location]
                    terrain=*^F*
                    count=1
                    include_borders=no
                [/have_location]
                [then]
                    {MESSAGE (Quësel) () (_"Quësel") _"Be careful! Our forest is almost gone!"}
                [/then]
            [/elseif]
        [/if]
    [/event]

    # TODO: some sort of condition to cause the elves to turn on you if you don't treat them right

    # WIP: victory event
    [event]
        name=victory
        {CLEAR_VARIABLE ano_wose_burn_counter}
    [/event]

    {ALL_ANO_DEATHS}
    {ELVISH_KILLING}
[/scenario]
