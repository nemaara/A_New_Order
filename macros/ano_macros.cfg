#textdomain wesnoth-A_New_Order

# Macros swiped from Bob_The_Mighty
#define CONDITION VAR TEST VALUE
    [variable]
        name={VAR}
        {TEST}={VALUE}
    [/variable]
#enddef

#define ALLOW_RECRUIT SIDE TYPE
    [allow_recruit]
        side={SIDE}
        type={TYPE}
    [/allow_recruit]
#enddef

#ifdef ALLOW_DUP_MACRO_DEFS
# wmlscope: start ignoring
#define CONDITION VARIABLE OP VALUE
    [variable]
        name={VARIABLE}
        {OP}={VALUE}
    [/variable]
#enddef
# wmlscope: stop ignoring
#endif

#define DISALLOW_RECRUIT SIDE TYPE
    [disallow_recruit]
        side={SIDE}
        type={TYPE}
    [/disallow_recruit]
#enddef

#define FILTER VAR VALUE
    [filter]
        {VAR}={VALUE}
    [/filter]
#enddef

#define SCROLL_TO X Y
    [scroll_to]
        x={X}
        y={Y}
    [/scroll_to]
#enddef

#define PLAY_SOUND SOUND_FILE
    [sound]
        name={SOUND_FILE}
    [/sound]
#enddef

#define DELAY TIME
    [delay]
        time={TIME}
    [/delay]
#enddef

#define REDRAW
    [redraw]
    [/redraw]
#enddef

# Macros inherent to ANO, programmed by szopen

#define HIDE_UNIT ID
    [hide_unit]
        id={ID}
    [/hide_unit]
#enddef

#define UNHIDE_UNIT ID
    [unhide_unit]
        id={ID}
    [/unhide_unit]
#enddef

#define GET_GLOBAL_VARIABLE variable
    [get_global_variable]
        namespace=ANewOrder
        from_global={variable}
        to_local=global_tmp
        side=1
    [/get_global_variable]
#enddef

#define CLEAR_GLOBAL_VARIABLE variable
    [clear_global_variable]
        namespace=ANewOrder
        name={variable}
        side=1
    [/clear_global_variable]
#enddef

#define GLOBAL_VARIABLE_TO_LOCAL variable local
    [get_global_variable]
        namespace=ANewOrder
        from_global={variable}
        to_local={local}
        side=1
    [/get_global_variable]
#enddef

#define SET_GLOBAL_VARIABLE variable value
    [set_variable]
        name=global_tmp
        value={value}
    [/set_variable]

    [set_global_variable]
        namespace=ANewOrder
        from_local=global_tmp
        to_global={variable}
        side=1
        immediate=yes
    [/set_global_variable]
#enddef

#define GLOBAL_VARIABLE_OP variable op value
    {GET_GLOBAL_VARIABLE {variable}}
    {VARIABLE_OP global_tmp {op} {value}}
    {SET_GLOBAL_VARIABLE {variable} $global_tmp}
#enddef

#define SET_ANO_GLOBAL_VARIABLES
    # Remember to update this when making a new release:
    {SET_GLOBAL_VARIABLE ANOversion 1.4.1}
    {SET_GLOBAL_VARIABLE ANOlast_scenario 0}
    {SET_GLOBAL_VARIABLE ANOmax_points_scored 0}
    {SET_GLOBAL_VARIABLE ANOpreviously_scored_points 0}
    {SET_GLOBAL_VARIABLE ANObarnon_dejavu 0}
    {SET_GLOBAL_VARIABLE ANObarnon_killed_last_turn 0}
    {SET_GLOBAL_VARIABLE ANObarnon_dejavu_turns 0}
    {SET_GLOBAL_VARIABLE ANObarnon_choice -1}
    {SET_GLOBAL_VARIABLE ANOhired_dejavu 0}
    {SET_GLOBAL_VARIABLE ANOhaeltin_last_dead -1}
    {SET_GLOBAL_VARIABLE ANOhaeltin_dejavu 0}
    {SET_GLOBAL_VARIABLE ANOburass_alive 0}
    {SET_GLOBAL_VARIABLE ANOreumarios_fate invalid}
    {SET_GLOBAL_VARIABLE ANOrobroes_fate invalid}
#enddef

#define SET_ANO_VARIABLES
    # Remember to update this when making a new release:
    {VARIABLE ano_version 1.4.1}
    {VARIABLE ano_warned yes}
    {VARIABLE ano_gawen_poisoned yes}
    {VARIABLE ano_assa_killed no}
    {VARIABLE ano_income 2}
    {VARIABLE ano_assa_interrogated no}
    {VARIABLE ano_assa_cryne_roe no}
    {VARIABLE ano_assa_cryne no}
    {VARIABLE ano_roe_lorin_clan_bought_poison no}
    {VARIABLE ano_lorin_clan_bought_poison no}
    {VARIABLE ano_reme_saved no}
    {VARIABLE ano_gawen_mother no}
    {VARIABLE ano_cryne_and_orcs no}
#enddef

#NOTE IMPORTANT: this is COSTLY MACRO
# FIXME: players seem to think this macro is used, however, wmlscope reports that it isn't...
#define COUNT_RELOADS variable unpleasant
    # it fires events "same turn reload", "back to the future reload"
    # "back to the past reload" with obvious meaning.
    # in addition, reload nth (e.g. reload 5, that is fifth reload)
    # and reload nth at turn mth (e.g "reload 5 at turn 4, that is fifth reload which happened at turn 4")
    # and reload previous turn (at new turn, if in previous turn was preload)
    # and "turn nth with reload mth" (e.g. "turn 5 with reload 4", that is this is turn fifth, and until now there were 4 reloads)
    #unpleasant is name of the VARIABLE, set true when something unpleasant happened
    [event]
        name=prestart

        {SET_GLOBAL_VARIABLE {variable} 0}
        {SET_GLOBAL_VARIABLE {variable}_turns 0}
        {VARIABLE ANOreload false}
        {VARIABLE {unpleasant} false}
        {VARIABLE {unpleasant}_times 0}
    [/event]

    [event]
        name=victory
        {CLEAR_GLOBAL_VARIABLE {variable}}
        {CLEAR_GLOBAL_VARIABLE {variable}_turns}
        {VARIABLE ANOreload false}
        {CLEAR_VARIABLE {unpleasant}}
        {CLEAR_VARIABLE {unpleasant}_times}
    [/event]

    [event]
        name=preload
        first_time_only=no

        {GET_GLOBAL_VARIABLE {variable}}
        {VARIABLE_OP global_tmp add 1}
        [fire_event]
            name="reload $global_tmp"
        [/fire_event]
        [fire_event]
            name="reload $global_tmp at turn $turn_number"
        [/fire_event]
        {SET_GLOBAL_VARIABLE {variable} $global_tmp}

        {GET_GLOBAL_VARIABLE {variable}_turns}

        {IF global_tmp greater_than $turn_number} #player played a bit, then reloaded to earlier turn
        {GLOBAL_VARIABLE_OP {variable} add 1}
        [fire_event]
            name=back to the past reload
        [/fire_event]
        {ELSE_IF global_tmp equals $turn_number} #player just reloaded in that turn
        {GLOBAL_VARIABLE_OP {variable} add 1}
        [fire_event]
            name=same turn reload
        [/fire_event]
        {ELSE} # player reloaded in the past, and now returned to older savegame, or if global_Tmp - turn_number -1 no reload
        {VARIABLE tmp 0}
        {VARIABLE_OP tmp add $turn_number}
        {VARIABLE_OP tmp add -1}
        {IF global_tmp equals $tmp} #ok no reload
        {ELSE} # "reloaded in the past, returned to the older save"
        {GLOBAL_VARIABLE_OP {variable} add 1}
        [fire_event]
            name=back to the future reload
        [/fire_event]
        {END_IF}
        {TWO_END_IFs}

        {SET_GLOBAL_VARIABLE ({variable}_turns) $turn_number}
        {VARIABLE ANOreload true}
        {VARIABLE {unpleasant} false}
    [/event]

    [event]
        name=new turn
        first_time_only=no
        #dejavu start
        {IF ANOreload equals true}
#ifdef __DEBUG__
        {DEBUGMSG1 "reloaded previous turn (${unpleasant}|:${unpleasant}_times|)"}
#endif
        [fire_event]
            name=reload previous turn
        [/fire_event]
        [fire_event]
            name="turn $turn_number with reload ${variable}"
        [/fire_event]
        {IF {unpleasant} equals false}
        {VARIABLE_OP {unpleasant}_times add 1}
#ifdef __DEBUG__
        {DEBUGMSG1 "generating event"}
#endif
        [fire_event]
            name="unpleasant event avoided with reload"
        [/fire_event]
        [fire_event]
            name="unpleasant event avoided with reload ${unpleasant}_times"
        [/fire_event]
        {ELSE}
        {IF {unpleasant} equals true} # may be unitialized in case preload happens before prestart
        [fire_event]
            name=reload failed to avoid unpleasant event
        [/fire_event]
        {END_IF_WITHOUT_ELSE}
        {END_IF}
        {END_IF_WITHOUT_ELSE}
        {VARIABLE ANOreload false}
        {VARIABLE {unpleasant} false}
    [/event]
#enddef

#NOTE IMPORTANT: This is VERY COSTLY macro (access to stable storage at each death}
#define COUNT_DEATHS_PERSISTENT variable unpleasant
    # events "reload to avoid losses" (player lost units and reloaded)
    # "reload to avoid losses mth" (the event happened for the mth time)
    # in addition, it collaborates with macro COUNT_RELOAD, unpleasant must be set
    # to the same variable in this and in COUNT_RELOAD macro. If player attacked
    # or was attacked at least once, and before reload there was at least one death
    # and after reload there again was attack but no death, then "unpleasant event
    # avoided with reload" is generated. Actually, this is still wrong, since
    # player could just try different strategy
    [event]
        name=prestart

        {SET_GLOBAL_VARIABLE {variable} 0}
        {SET_GLOBAL_VARIABLE {variable}_prev 0}
        {SET_GLOBAL_VARIABLE {variable}_count 0}
        {SET_GLOBAL_VARIABLE {variable}_turn -1}
        {SET_GLOBAL_VARIABLE {variable}_lastkilled_id erroneus_id}
        {SET_GLOBAL_VARIABLE {variable}_lastkilled_type error_within_macros}
        {VARIABLE {variable}_local 0}
        {VARIABLE {unpleasant}_attack false}
        {VARIABLE wasendturn false}
        {SET_GLOBAL_VARIABLE {unpleasant}_endturn false}
    [/event]

    [event]
        name=victory
        {CLEAR_GLOBAL_VARIABLE {variable}}
        {CLEAR_GLOBAL_VARIABLE {variable}_prev}
        {CLEAR_GLOBAL_VARIABLE {variable}_count}
        {CLEAR_GLOBAL_VARIABLE {variable}_turn}
        {CLEAR_GLOBAL_VARIABLE {variable}_lastkilled_id}
        {CLEAR_GLOBAL_VARIABLE {variable}_lastkilled_type}
        {CLEAR_VARIABLE {variable}_local}
        {CLEAR_VARIABLE {unpleasant}_attack}
        {CLEAR_GLOBAL_VARIABLE {unpleasant}_endturn}
        {CLEAR_VARIABLE wasendturn}
    [/event]

    [event]
        name=attack
        first_time_only=no
        [filter]
            side=1
        [/filter]
        {VARIABLE {unpleasant}_attack true}
    [/event]

    [event]
        name=side 1 turn
        first_time_only=no
        {VARIABLE wasendturn false}
    [/event]

    [event]
        name=side 1 turn end
        first_time_only=no
        {VARIABLE wasendturn true}
    [/event]

    [event]
        name=die
        first_time_only=no
        [filter]
            side=1
        [/filter]
        {VARIABLE_OP {variable}_local add 1}
        {VARIABLE {unpleasant} true}
        {GLOBAL_VARIABLE_OP {variable} add 1}
        [store_unit]
            [filter]
                x=$x1
                y=$y1
            [/filter]
            variable=tmp
        [/store_unit]
        {SET_GLOBAL_VARIABLE {variable}_lastkilled_id $tmp.id}
        {SET_GLOBAL_VARIABLE {variable}_lastkilled_type $tmp.type}
#ifdef __DEBUG__
        {DEBUGMSG1 "last {variable}_lastkilled_type $tmp.type"}
#endif
        {CLEAR_VARIABLE tmp}
        {SET_GLOBAL_VARIABLE {variable}_turn $turn_number}
        {IF wasendturn equals true}
        {SET_GLOBAL_VARIABLE {unpleasant}_endturn true}
        {ELSE}
        {SET_GLOBAL_VARIABLE {unpleasant}_endturn false}
        {END_IF}
    [/event]

    [event]
        name=preload
        first_time_only=no
        {VARIABLE {unpleasant}_attack false}
        {GET_GLOBAL_VARIABLE {variable}}
        {GLOBAL_VARIABLE_TO_LOCAL {variable}_turn tmp}
        {GLOBAL_VARIABLE_TO_LOCAL {variable}_count xyz}
#ifdef __DEBUG__
        {DEBUGMSG1 "reload to avoid deaths : $xyz until now"}
#endif
        # problem: right now, this event is generated both when player reloads
        # during his turn, as well as when he hits end turn and then reloads
        {IF global_tmp numerical_not_equals (${variable}_local)}
        {GLOBAL_VARIABLE_TO_LOCAL {unpleasant}_endturn wasendturn}
        {IF tmp equals $turn_number} # reload in the same turn
        {IF wasendturn equals false} # same turn
        [fire_event]
            name=reload to the same turn to avoid losses
        [/fire_event]
        {ELSE} #endturn was hit
        [fire_event]
            name=reload to the previous turn to avoid losses
        [/fire_event]
        {END_IF}
        {GLOBAL_VARIABLE_OP {variable}_count add 1}
        [fire_event]
            name=reload to avoid losses
        [/fire_event]
        {GET_GLOBAL_VARIABLE {variable}_count}
        [fire_event]
            name="reload to avoid losses $global_tmp"
        [/fire_event]
        {ELSE}
        {VARIABLE_OP tmp add -1}
        {IF tmp equals $turn_number} # end turn, player had losses, reload to the previous turn
        {GLOBAL_VARIABLE_OP {variable}_count add 1}
        [fire_event]
            name=reload to avoid losses
        [/fire_event]
        {GET_GLOBAL_VARIABLE {variable}_count}
        [fire_event]
            name="reload to avoid losses $global_tmp"
        [/fire_event]
        {END_IF_WITHOUT_ELSE}
        {END_IF}
        {END_IF_WITHOUT_ELSE}
        {SET_GLOBAL_VARIABLE {variable}_prev $global_tmp}
        {SET_GLOBAL_VARIABLE {variable} (${variable}_local)}
    [/event]
#enddef

#define EGETUNIT_ATTR WHAT VAR
    [store_unit]
        variable=ano_tmp
        [filter]
            x=$x1
            y=$y1
        [/filter]
    [/store_unit]
#ifdef __DEBUG__
    {MESSAGE Assassin () () _"getunit $x1 : $y1 : $ano_tmp.description"} # wmllint: ignore
#endif
    {MESSAGE Assassin () () _"getunit $x1 : $y1 : $ano_tmp.id"}
    [set_variable]
        name={VAR}
        value=$ano_tmp.{WHAT}
    [/set_variable]
    {CLEAR_VARIABLE ano_tmp}
#enddef

#define SETVAL NAME VARIABLE VALUE
    [store_unit]
        variable=tmp
        kill=yes
        [filter]
            id={NAME}
        [/filter]
    [/store_unit]
    [set_variable]
        name=tmp.{VARIABLE}
        value={VALUE}
    [/set_variable]
    [unstore_unit]
        variable=tmp
    [/unstore_unit]
    [clear_variable]
        name=tmp
    [/clear_variable]
#enddef

#define OPVAL NAME VARIABLE OP VALUE
    [store_unit]
        variable=tmp
        kill=yes
        [filter]
            id={NAME}
        [/filter]
    [/store_unit]
    [set_variable]
        name=tmp.{VARIABLE}
        {OP}={VALUE}
    [/set_variable]
    [unstore_unit]
        variable=tmp
    [/unstore_unit]
    [clear_variable]
        name=tmp
    [/clear_variable]
#enddef

#define RECALL Name
    [recall]
        id={Name}
    [/recall]
#enddef

#define RECALL_TYPE Name
    [recall]
        type={Name}
    [/recall]
#enddef

#define RECALLXY Name X Y
    [recall]
        id={Name}
        x,y={X},{Y}
    [/recall]
#enddef

#define REME_DEATH_N
    [event]
        name=last breath
        [filter]
            id=Reme Carrenemoe
        [/filter]
        {MSG_Reme _"I can't hold my sword anymore... I can't..."}
    [/event]
#enddef

#define REUMARIO_DEATH
    [event]
        name=last breath
        [filter]
            id=Reumario
        [/filter]
        {MSG_Reumario _"My ancestors, I am coming to you! I hope I have not failed you..."}
    [/event]
#enddef

#define REGVEN_DEATH
    [event]
        name=last breath
        [filter]
            id=Karl Regven
        [/filter]
        {MESSAGE (Karl Regven) (portraits/regven.png) (Karl Regven)
        _"I'm not afraid... I would just want to smoke a little longer..."}
    [/event]
#enddef

#define YAHYAZAD_DEATH
    [event]
        name=last breath
        [filter]
            id=Majid Yahyazad
        [/filter]
        {MSG_Yahyazad _"Dunefolk die without fear!"}
    [/event]
    [event]
        name=die
        [filter]
            id=Majid Yahyazad
        [/filter]
        [endlevel]
            result=defeat
        [/endlevel]
    [/event]
#enddef

#define GAWEN_DEATH
    [event]
        name=last breath
        [filter]
            id=Gawen Hagarthen
        [/filter]
        {MSG_Gawen _"No! It's impossible! I have just started!"}
    [/event]
    [event]
        name=die
        [filter]
            id=Gawen Hagarthen
        [/filter]
        [endlevel]
            result=defeat
        [/endlevel]
    [/event]
#enddef

#define LORIN_DEATH
    [event]
        name=last breath
        [filter]
            id=Lady Lorin
        [/filter]
        {MSG_Lorin _"That's not fair!"}
    [/event]
    [event]
        name=die
        [filter]
            id=Lady Lorin
        [/filter]
        [endlevel]
            result=defeat
        [/endlevel]
    [/event]
#enddef

#ifdef __UNUSED__
# wmlscope: start ignoring
#define CHANGE_TYPE DESC VALUE
    [store_unit]
        [filter]
            id={DESC}
        [/filter]
        kill=yes
        variable=ano_change_side_tmp
    [/store_unit]
    [set_variable]
        name=ano_change_side_tmp.type
        value={VALUE}
    [/set_variable]
    [unstore_unit]
        variable=ano_change_side_tmp
    [/unstore_unit]
    [clear_variable]
        name=ano_change_side_tmp
    [/clear_variable]
#enddef
# wmlscope: stop ignoring
#endif

#define CHANGE_SIDE DESC VALUE
    [store_unit]
        [filter]
            id={DESC}
        [/filter]
        kill=yes
        variable=ano_change_side_tmp
    [/store_unit]
    [set_variable]
        name=ano_change_side_tmp.side
        value={VALUE}
    [/set_variable]
    [clear_variable]
        name=ano_change_side_tmp.status
    [/clear_variable]
    [clear_variable]
        name=ano_change_side_tmp.ai_special
    [/clear_variable]
    [unstore_unit]
        variable=ano_change_side_tmp
    [/unstore_unit]
    [clear_variable]
        name=ano_change_side_tmp
    [/clear_variable]
#enddef

#define REME_DEATH
    [event]
        name=die
        [filter]
            id=Reme Carrenemoe
        [/filter]
        {MSG_Reme
        _"I can't hold my sword anymore... I can't..."}
        [endlevel]
            result=defeat
        [/endlevel]
    [/event]
#enddef

#define VARUNIT ARRAY INDEX UNIT
#ifdef __UNUSED__
    {VARIABLE ({ARRAY}[{INDEX}].description) (${UNIT}.description)} # wmllint: ignore
#endif
    {VARIABLE ({ARRAY}[{INDEX}].id) (${UNIT}.id)}
    {VARIABLE ({ARRAY}[{INDEX}].experience) (${UNIT}.experience)}
    {VARIABLE ({ARRAY}[{INDEX}].gender) (${UNIT}.gender)}
    {VARIABLE ({ARRAY}[{INDEX}].type) (${UNIT}.type)}
    {VARIABLE ({ARRAY}[{INDEX}].unrenamable) (${UNIT}.unrenamable)}
    {VARIABLE ({ARRAY}[{INDEX}].upkeep) (${UNIT}.upkeep)}
    {VARIABLE ({ARRAY}[{INDEX}].name) (${UNIT}.name)}
    {FOREACH ({UNIT}.modifications.trait) arr_in}
        {VARIABLE ({ARRAY}[{INDEX}].traits) (${UNIT}.modifications.trait[$arr_in].id)}
    {NEXT arr_in}
#enddef

#define FVAR VAR1 VAR2
    [set_variable]
        name={VAR1}
        value={VAR2}
    [/set_variable]
#enddef

#define VARTOUNIT ARRAY INDEX SIDE X Y
    {FVAR (desc_tmp) (${ARRAY}[{INDEX}].id) }
    {FVAR (u_tmp) (${ARRAY}[{INDEX}].name) }
    {FVAR (exp_tmp) (${ARRAY}[{INDEX}].experience)}
    {FVAR (gender_tmp) (${ARRAY}[{INDEX}].gender) }
    {FVAR (type_tmp) (${ARRAY}[{INDEX}].type)}
    {FVAR (upkeep_tmp) (${ARRAY}[{INDEX}].upkeep)}
    {FVAR (id_tmp) (${ARRAY}[{INDEX}].traits)}
    #Only ONE trait is saved: intelligent,strong,quick, resilient, otherwise loyal
    [if]
        [variable]
            name=id_tmp
            equals="resilient"
        [/variable]
        [then]
            [unit]
                id=$desc_tmp
                experience=$exp_tmp
                type=$type_tmp
                x={X}
                y={Y}
                side={SIDE}
                gender=$gender_tmp
                upkeep=$upkeep_tmp
                name=$u_tmp
                [modifications]
                    {TRAIT_RESILIENT}
                [/modifications]
            [/unit]
        [/then]
        [else]
            [if]
                [variable]
                    name=id_tmp
                    equals="quick"
                [/variable]
                [then]
                    [unit]
                        id=$desc_tmp
                        experience=$exp_tmp
                        type=$type_tmp
                        x={X}
                        y={Y}
                        side={SIDE}
                        gender=$gender_tmp
                        upkeep=$upkeep_tmp
                        name=$u_tmp
                        [modifications]
                            {TRAIT_QUICK}
                        [/modifications]
                    [/unit]
                [/then]
                [else]
                    [if]
                        [variable]
                            name=id_tmp
                            equals="strong"
                        [/variable]
                        [then]
                            [unit]
                                id=$desc_tmp
                                experience=$exp_tmp
                                type=$type_tmp
                                x={X}
                                y={Y}
                                side={SIDE}
                                gender=$gender_tmp
                                upkeep=$upkeep_tmp
                                name=$u_tmp
                                [modifications]
                                    {TRAIT_STRONG}
                                [/modifications]
                            [/unit]
                        [/then]
                        [else]
                            [if]
                                [variable]
                                    name=id_tmp
                                    equals="intelligent"
                                [/variable]
                                [then]
                                    [unit]
                                        id=$desc_tmp
                                        experience=$exp_tmp
                                        type=$type_tmp
                                        x={X}
                                        y={Y}
                                        side={SIDE}
                                        gender=$gender_tmp
                                        upkeep=$upkeep_tmp
                                        name=$u_tmp
                                        [modifications]
                                            {TRAIT_INTELLIGENT}
                                        [/modifications]
                                    [/unit]
                                [/then]
                                [else]
                                    [unit]
                                        id=$desc_tmp
                                        experience=$exp_tmp
                                        type=$type_tmp
                                        x={X}
                                        y={Y}
                                        side={SIDE}
                                        gender=$gender_tmp
                                        upkeep=$upkeep_tmp
                                        name=$u_tmp
                                        [modifications]
                                            {TRAIT_LOYAL}
                                        [/modifications]
                                    [/unit]
                                [/else]
                            [/if]
                        [/else]
                    [/if]
                [/else]
            [/if]
        [/else]
    [/if]
    {CLEAR_VARIABLE u_tmp}
    {CLEAR_VARIABLE desc_tmp}
    {CLEAR_VARIABLE exp_tmp}
    {CLEAR_VARIABLE type_tmp}
    {CLEAR_VARIABLE gender_tmp}
    {CLEAR_VARIABLE upkeep_tmp}
    {CLEAR_VARIABLE id_tmp}
#enddef

#define STOREUNIT X Y
    [store_unit]
        [filter]
            x={X}
            y={Y}
        [/filter]
        variable=ano_units_tmp
        kill=yes
    [/store_unit]
    {VARUNIT ano_units $ano_units_last_index ano_units_tmp}
    {VARIABLE_OP ano_units_last_index add 1}
#enddef

#define STORERECALL ANO_LIST
    [recall]
        side=1
        x=1
        y=1
    [/recall]
    [if]
        [have_unit]
            x=1
            y=1
        [/have_unit]
        [then]
            [set_variable]
                name=ano_ok_tmp
                value=yes
            [/set_variable]
            [store_unit]
                [filter]
                    x=1
                    y=1
                [/filter]
                variable=ano_units_tmp
                kill=yes
            [/store_unit]
            {VARUNIT ({ANO_LIST}) $ano_recalls_last_index ano_units_tmp}
            {VARIABLE_OP ano_recalls_last_index add 1}
        [/then]
        [else]
            [set_variable]
                name=ano_ok_tmp
                value=no
            [/set_variable]
        [/else]
    [/if]
#enddef

#define RECALL_ALL
    [set_variable]
        name=ano_ok_tmp
        value=yes
    [/set_variable]
    [while]
        [variable]
            name=ano_ok_tmp
            equals=yes
        [/variable]
        [do]
            [recall]
                side=1
                x=1
                y=1
            [/recall]
            [if]
                [have_unit]
                    x=1
                    y=1
                [/have_unit]
                [then]
                    [teleport]
                        [filter]
                            x=1
                            y=1
                        [/filter]
                        x=10
                        y=10
                    [/teleport]
                [/then]
                [else]
                    {VARIABLE ano_ok_tmp no}
                [/else]
            [/if]
        [/do]
    [/while]
    [clear_variable]
        name=ano_ok_tmp
    [/clear_variable]
#enddef

#define RECALL_AND_STORE_ALL ANO_LIST
    {VARIABLE ano_recalls_last_index 0}
    [set_variable]
        name=ano_ok_tmp
        value=yes
    [/set_variable]
    [while]
        [variable]
            name=ano_ok_tmp
            equals=yes
        [/variable]
        [do]
            {STORERECALL ({ANO_LIST}) }
        [/do]
    [/while]
    [clear_variable]
        name=ano_ok_tmp
    [/clear_variable]
#enddef

#define KAREN_DEATH
    [event]
        name=die
        [filter]
            id=Karen
        [/filter]
        #po: unsure how to complete this sentence... "life" seems the most obvious, but "sight" and "blood" also work
        # (plus my mind can't stop completing it with "virginity" even though that makes no sense)
        {MSG_Karen _"Father! Father! I am losing my..."}
        [endlevel]
            result=defeat
        [/endlevel]
    [/event]
#enddef

#define RUVIO_DEATH
    [event]
        name=die
        [filter]
            id=Ruvio
        [/filter]
        {MSG_Ruvio _"No! I have still so much to do!"}
        [endlevel]
            result=defeat
        [/endlevel]
    [/event]
#enddef

#define CLEAR_RECALL
    [set_variable]
        name=ano_ok_tmp
        value=yes
    [/set_variable]
    [while]
        [variable]
            name=ano_ok_tmp
            equals=yes
        [/variable]
        [do]
            [recall]
                side=1
                x=1
                y=1
            [/recall]
            [if]
                [have_unit]
                    x=1
                    y=1
                    side=1
                [/have_unit]
                [then]
                    [store_unit]
                        [filter]
                            x=1
                            y=1
                        [/filter]
                        variable=ano_units_tmp
                        kill=yes
                    [/store_unit]
                    {CLEAR_VARIABLE ano_units_tmp}
                [/then]
                [else]
                    [set_variable]
                        name=ano_ok_tmp
                        value=no
                    [/set_variable]
                [/else]
            [/if]
        [/do]
    [/while]
    [clear_variable]
        name=ano_ok_tmp
    [/clear_variable]
#enddef

#define MOVETO X Y DESC
    name=moveto
    [filter]
        x={X}
        y={Y}
        id={DESC}
    [/filter]
#enddef

#ifdef __UNUSED__
# wmlscope: start ignoring
#define DIE  DESC
    name=die
    [filter]
        id={DESC}
    [/filter]
#enddef
# wmlscope: stop ignoring
#endif

#define KILLEDBY  DESC DESC2
    name=last breath
    [filter]
        id={DESC}
    [/filter]
    [filter_second]
        id={DESC2}
    [/filter_second]
#enddef

#define LABEL X Y TEXT
    [label]
        x={X}
        y={Y}
        text={TEXT}
    [/label]
#enddef

#ifdef DEBUG_MODE
# wmlscope: start ignoring
#define DEBUGMSG0
    {MESSAGE narrator (wesnoth-icon.png) ()
    _"This is a debug message. If you see it, then it means I forgot to delete it from the release scenario."}
#enddef
# wmlscope: stop ignoring
#endif

#define DEBUGMSG1 TEXT
    # Remember, when running wmllint/wmlindent, to check to make sure they don't mess with the spacing here:
    {MESSAGE narrator (wesnoth-icon.png) ()
    #po: trailing space is intentional here:
    _"This is a debug message. If you see it, then it means I forgot to delete it from the release scenario. "+"'{TEXT}'"}
#enddef

#define NEXT_SCENARIO_VICTORY SCENARIO
    [endlevel]
        next_scenario={SCENARIO}
        result=victory
        bonus=yes
    [/endlevel]
#enddef

#define NEXT_SCENARIO_CONTINUE SCENARIO
    [endlevel]
        next_scenario={SCENARIO}
        result=victory
        carryover_percentage=100
        carryover_report=no
        linger_mode=no
        bonus=no
    [/endlevel]
#enddef

#define VARLOG VAR LOG VAL
    [variable]
        name={VAR}
        {LOG}={VAL}
    [/variable]
#enddef

#define TELEPORT UNIT X Y
    [teleport]
        [filter]
            id={UNIT}
        [/filter]
        x,y={X},{Y}
    [/teleport]
#enddef

#define ALL_ANO_DEATHS
    {LORIN_DEATH}
    {YAHYAZAD_DEATH}
    {REUMARIO_DEATH}
    {REME_DEATH_N}
    {KAREN_DEATH}
    {RUVIO_DEATH}
    {REGVEN_DEATH}
    [event]
        name=die
        [filter]
            id=Gawen Hagarthen
        [/filter]
        [endlevel]
            result=defeat
        [/endlevel]
    [/event]
#enddef

#This is from Under the Burning Suns by Quartex
# create a unit with full upkeep and traits
#define UNIT_T TYPE ID DESC SIDE X Y
    {RANDOM_TRAIT_UNIT ({TYPE}) ({ID}) ({DESC}) ({SIDE}) ({X}) ({Y})}
#enddef

# MACROS to implement random traits
# creates one unit with full upkeep and 2 random traits
#define RANDOM_TRAIT_UNIT TYPE ID DESC SIDE X Y
    {RANDOM 1..6}
    {TRAIT_IF 1 (quick,resilient) ({TRAIT_QUICK}) ({TRAIT_RESILIENT}) ({TYPE}) ({DESC}) ({ID}) ({SIDE}) ({X}) ({Y})}
    {TRAIT_IF 2 (strong,resilient) ({TRAIT_STRONG}) ({TRAIT_RESILIENT}) ({TYPE}) ({ID}) ({DESC}) ({SIDE}) ({X}) ({Y})}
    {TRAIT_IF 3 (intelligent,resilient) ({TRAIT_INTELLIGENT}) ({TRAIT_RESILIENT}) ({TYPE}) ({ID}) ({DESC}) ({SIDE}) ({X}) ({Y})}
    {TRAIT_IF 4 (strong,quick) ({TRAIT_STRONG}) ({TRAIT_QUICK}) ({TYPE}) ({ID}) ({DESC}) ({SIDE}) ({X}) ({Y})}
    {TRAIT_IF 5 (strong,intelligent) ({TRAIT_STRONG}) ({TRAIT_INTELLIGENT}) ({TYPE}) ({ID}) ({DESC}) ({SIDE}) ({X}) ({Y})}
    {TRAIT_IF 6 (quick,intelligent) ({TRAIT_QUICK}) ({TRAIT_INTELLIGENT}) ({TYPE}) ({ID}) ({DESC}) ({SIDE}) ({X}) ({Y})}
#enddef

#define TRAIT_IF NUMBER TRAITDESC TRAIT1 TRAIT2 TYPE ID DESC SIDE X Y
    [if]
        [variable]
            name=random
            equals={NUMBER}
        [/variable]
        [then]
            [unit]
                side={SIDE}
                type={TYPE}
                id={ID}
                name={DESC}
                upkeep=full
                x={X}
                y={Y}
                [modifications]
                    {TRAIT1}
                    {TRAIT2}
                [/modifications]
            [/unit]
        [/then]
    [/if]
#enddef

#define PROFITABLE_TERRAIN X Y GOLD
    #This macro assumes that initial income is 3
    [event]
        name=prestart
        {VARIABLE (ano_{X}_{Y}) not_taken}
        {VARIABLE ano_income 3}
    [/event]
    [event]
        name=victory
        {CLEAR_VARIABLE (ano_{X}_{Y})}
        {CLEAR_VARIABLE ano_income}
    [/event]
    [event]
        name=moveto
        first_time_only=no
        [filter]
            side=1
        [/filter]
        {IF (ano_{X}_{Y}) equals not_taken}
        {VARIABLE_OP ano_income add ({GOLD})}
        [modify_side]
            side=1
            income=$ano_income
        [/modify_side]
        {VARIABLE (ano_{X}_{Y}) taken}
        {END_IF_WITHOUT_ELSE}
    [/event]
    [event]
        name=moveto
        first_time_only=no
        [filter]
            [not]
                side=1
            [/not]
        [/filter]
        {IF (ano_{X}_{Y}) equals taken}
        {VARIABLE_OP ano_income add (-{GOLD})}
        [modify_side]
            side=1
            income=$ano_income
        [/modify_side]
        {VARIABLE (ano_{X}_{Y}) not_taken}
        {END_IF_WITHOUT_ELSE}
    [/event]
#enddef

#define MAKE_LOYAL OP WHAT
    {CLEAR_VARIABLE ano_loyal}
    [store_unit]
        variable=ano_loyal
        [filter]
            {OP}={WHAT}
            side=1
        [/filter]
#ifdef __UNUSED__
        kill=yes
        fire_event=no
        animate=no
#endif
    [/store_unit]
    {MSG_narrator _"The unit $ano_loyal[0].name became LOYAL."}
    {VARIABLE (ano_loyal[0].traits_description) ("$ano_loyal[0].traits_description" + _"loyal")}
    {VARIABLE (ano_loyal[0].upkeep) ("loyal")}
    {VARIABLE (ano_loyal[0].modifications.trait[2].id) ("loyal")}
    {VARIABLE (ano_loyal[0].modifications.trait[2].name) (_"loyal")}
    {VARIABLE (ano_loyal[0].modifications.trait[2].effect.apply_to) ("loyal")}
    {VARIABLE (ano_loyal[0].modifications.trait[2].description) (_"Zero upkeep")} # wmllint: ignore
    {VARIABLE (ano_loyal[0].overlays) ("misc/loyal-icon.png")}
    [unstore_unit]
        variable=ano_loyal[0]
    [/unstore_unit]
    {CLEAR_VARIABLE ano_loyal}
#enddef

# FIXME: how about refactoring this just to use the normal "notes" tag?
#define OBJECTIVE_NOTES _NOTES_TEXT
    note="*"+_"Scenario notes:"+"
"+{_NOTES_TEXT}
#enddef
